name: Deploy to AWS

on:
  push:
    branches:
      - main  # Trigger the deployment when code is pushed to the main branch.

jobs:
  build:
    runs-on: ubuntu-latest  # Define the environment (Ubuntu in this case)
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2  # Checkout the repository code

    # ✅ Set up AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # ✅ Deploy Static Website to S3 using AWS CLI
    - name: Deploy to S3
      run: |
        aws s3 sync ./website s3://myawsfulldeploy --acl public-read
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}

    # ✅ Deploy Lambda Function
    - name: Deploy Lambda Function
      run: |
        zip -r lambda_function.zip lambda_function.py  # Ensure the correct filename/folder
        aws lambda update-function-code \
          --function-name processForm \
          --zip-file fileb://lambda_function.zip \
          --region $AWS_REGION \
          --publish
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}

    # ✅ Ensure DynamoDB Table Exists
    - name: Ensure DynamoDB Table Exists
      run: |
        if ! aws dynamodb describe-table --table-name Users --region $AWS_REGION > /dev/null 2>&1; then
          aws dynamodb create-table \
            --table-name Users \
            --attribute-definitions AttributeName=email,AttributeType=S \
            --key-schema AttributeName=email,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
            --region $AWS_REGION
        else
          echo "DynamoDB table Users already exists. Skipping creation."
        fi
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
